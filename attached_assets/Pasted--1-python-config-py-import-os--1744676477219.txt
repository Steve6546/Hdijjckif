**الحل النهائي المتكامل:**

### الخطوة 1: إنشاء ملف التكوين المركزي
```python
# config.py
import os

class Settings:
    OPENROUTER_API_KEY = os.getenv("OR_KEY", "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")
    SITE_URL = "https://brainos.ai"
    SITE_NAME = "BrainOS v4.0"
    ALLOWED_EXTENSIONS = ['.jpg', '.png', '.zip', '.pdf']
    MAX_UPLOAD_SIZE = 200  # MB
```

### الخطوة 2: بناء نواة النظام الأساسية
```python
# core/system.py
from openai import OpenAI
from config import Settings
import base64
import concurrent.futures

class BrainCore:
    def __init__(self):
        self.client = OpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=Settings.OPENROUTER_API_KEY
        )
        
        self.agent_pool = {
            'vision': 'google/gemini-2.5-pro-exp-03-25:free',
            'research': 'meta-llama/llama-4-maverick:free',
            'coding': 'open-r1/olympiccoder-32b:free'
        }

    def process_input(self, mode, inputs):
        try:
            messages = self._prepare_messages(inputs)
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(
                    self.client.chat.completions.create,
                    model=self.agent_pool[mode],
                    messages=messages,
                    extra_headers={
                        "HTTP-Referer": Settings.SITE_URL,
                        "X-Title": Settings.SITE_NAME
                    }
                )
                return future.result().choices[0].message.content
        except Exception as e:
            return f"Error: {str(e)}"

    def _prepare_messages(self, data):
        messages = [{"role": "system", "content": "You are BrainOS AI Assistant"}]
        
        if data.get('files'):
            for file in data['files']:
                if file['type'].startswith('image'):
                    messages.append({
                        "role": "user",
                        "content": [
                            {"type": "text", "text": data['text']},
                            {"type": "image_url", "image_url": {"url": file['url']}}
                        ]
                    })
        else:
            messages.append({"role": "user", "content": data['text']})
        
        return messages
```

### الخطوة 3: تطوير واجهة المستخدم المتقدمة
```python
# ui/interface.py
import streamlit as st
from core.system import BrainCore
from config import Settings
import time

class NeuroInterface:
    def __init__(self):
        self.core = BrainCore()
        self._setup_theme()
    
    def _setup_theme(self):
        st.set_page_config(
            page_title=Settings.SITE_NAME,
            layout="wide",
            initial_sidebar_state="expanded"
        )
        
        st.markdown(f"""
        <style>
            .reportview-container .main .block-container {{
                max-width: 1200px;
                padding-top: 2rem;
                padding-right: 2rem;
                padding-left: 2rem;
                padding-bottom: 2rem;
            }}
            .stButton>button {{
                background: #2e7d32;
                color: white;
                border-radius: 10px;
                padding: 0.8rem;
                transition: 0.3s;
            }}
            .stButton>button:hover {{
                background: #1b5e20;
            }}
        </style>
        """, unsafe_allow_html=True)
    
    def show_dashboard(self):
        st.title("🧠 نظام BrainOS الذكي")
        
        # الأزرار الرئيسية
        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button("🖼️ تحليل الصور", help="تحليل الصور باستخدام الذكاء الاصطناعي"):
                st.session_state.mode = 'vision'
        with col2:
            if st.button("🌐 بحث ذكي", help="البحث في مصادر الإنترنت الموثوقة"):
                st.session_state.mode = 'research'
        with col3:
            if st.button("💻 مساعدة برمجية", help="الحصول على مساعدة في كتابة الأكواد"):
                st.session_state.mode = 'coding'
        
        # منطقة الإدخال
        with st.form("input_form"):
            input_text = st.text_area("✍️ أدخل طلبك:", height=150)
            uploaded_files = st.file_uploader(
                "📤 رفع الملفات (حد أقصى 200MB)",
                type=Settings.ALLOWED_EXTENSIONS,
                accept_multiple_files=True
            )
            
            if st.form_submit_button("🚀 إرسال الطلب"):
                self._handle_submission(input_text, uploaded_files)
        
        # عرض النتائج
        if 'results' in st.session_state:
            st.subheader("📝 النتائج:")
            for idx, result in enumerate(st.session_state.results):
                with st.expander(f"النتيجة {idx+1} - {result['type']}"):
                    st.code(result['content'], language='text')

    def _handle_submission(self, text, files):
        if not text and not files:
            st.er...